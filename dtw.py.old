'''
This script will do dynamic time warping (but requires alterations for applications)

distance function needs to be set for the needs of the applciation 
	ideas for strato stuff
	- just euclidean distance?
	- squared distance?


TODO
- get depth
- line up GR and RESIST (maybe do something with like, in 1, but NOT in the other)
- Figure out how to do more than 2 at a time (some multi-dimentional dynamic programming).
- Maybe find 6 big ones and then small one between easy of the 6 (1 at a time)?
- Do Z scores!


'''
import csv
import math
import matplotlib.pylab as plt
import matplotlib.collections as clt
import numpy as np
import scipy.signal
import sys

EPSILON = 0.0000001

def distance(x, y):
	'''
	Calculates some distance between two data (this can be a single point or even a list of points (depending on metric)). This method should be changed to fit the needs of the applications

	:param x: Some data 
	:param y: Some other data

	:returns: Calculated distance between the two data.
	'''
	return abs(x - y)
	#return (x-y)**2

def dtw(s, t, d):
	'''
	Performs basic dynamic time warping (no window on this one).

	WARNING! Need to have array 1 bigger because

	:param s: Some data series 
	:param t: Some other data series
	:param d: Some distance measure

	:returns: best value in the bottom corner
	:returns: matrix after dtw was done (need this to actual do alignment).
	'''
	#setup DTW matrix
	DTW = np.zeros((len(s) + 1, len(t) + 1))	#+ 1 because of 0 needing the extra row and col
	DTW[1:,0] = sys.float_info.max
	DTW[0,1:] = sys.float_info.max

	#Calculate full DTW matrix
	for i in range(1, len(s) + 1):
		for j in range(1, len(t) + 1):
			sPoint = s[i - 1]			#this will change denending on how d works
			tPoint = t[j - 1]			#this will change denending on how d works
			cost = d(sPoint, tPoint)
			DTW[i,j] = cost + min(DTW[i-1, j], DTW[i, j-1], DTW[i-1, j-1])	#insertion, deletion, match (in that order)

	return DTW[-1,-1], DTW



def dtw_window(s, t, w, d):
	'''
	Performs window dynamic time warping (window on this one). By using a window we can enforce some locality constraint.

	:param s: Some data series 
	:param t: Some other data series
	:param w: Window size
	:param d: Some distance measure

	:returns: best value in the bottom corner
	:returns: matrix after dtw was done (need this to actual do alignment).
	'''
	#setup DTW matrix
	DTW = np.zeros((len(s) + 1, len(t) + 1))	#+ 1 because of 0 needing the extra row and col
	DTW[:,:] = sys.float_info.max
	DTW[0,0] = 0

	w = max(w, abs(len(s) - len(t)))	#Makes sure the window isnt't bigger than the difference between lengths of data

	#Calculate full DTW matrix
	for i in range(1, len(s) + 1):
		for j in range(max(1, i-w), min(len(t) + 1, i + w)):
			sPoint = s[i - 1]			#this will change denending on how d works
			tPoint = t[j - 1]			#this will change denending on how d works
			cost = d(sPoint, tPoint)
			DTW[i,j] = cost + min(DTW[i-1, j], DTW[i, j-1], DTW[i-1, j-1])	#insertion, deletion, match (in that order)

	return DTW[-1,-1], DTW


def backtrack(DTW):
	'''
	Backtracks and returns the points where there were matches.

	:param DTW: The dynamic time warping matrix

	:returns: A list of 'time' points where there were matches found in the matrix. Points will be ordered in the same way the matrix was generated.
	'''

	#setup
	points = []
	i= len(DTW) - 1
	j = len(DTW[0]) - 1
	#backtracking part
	while i != 0 and j != 0:
		minV = min(DTW[i - 1, j], DTW[i, j - 1], DTW[i - 1, j - 1])
		if abs(minV - DTW[i - 1, j]) < EPSILON:
			i = i - 1
		elif abs(minV - DTW[i, j - 1]) < EPSILON :
			j = j - 1
		else:						#must be an overlap then
			points.append([i, j])
			i = i - 1
			j = j - 1
	
	return points

def backtrack_overlapFirst(DTW):
	'''
	Backtracks but gives backtrack the first check (basically same as above but with different 'if' statement orderings. Returns the points where there were matches.

	:param DTW: The dynamic time warping matrix

	:returns: A list of 'time' points where there were matches found in the matrix. Points will be ordered in the same way the matrix was generated.
	'''

	#setup
	points = []
	i = len(DTW) - 1
	j = len(DTW[0]) - 1

	#backtracking part
	while i != 0 and j != 0:
		minV = min(DTW[i - 1, j], DTW[i, j - 1], DTW[i - 1, j - 1])
		if abs(minV - DTW[i - 1, j - 1]) < EPSILON:		#overlap
			points.append([i, j])
			i = i - 1
			j = j - 1
		elif abs(minV - DTW[i - 1, j]) < EPSILON:			#insertion
			i = i - 1
		else:								#must be a deletion
			j = j - 1

	
	return points


######################
# CODE DOWN HERE NOW #
######################

############
# IO stuff #
############

#d1 = [0,0,0,1,1,2,1,0,1,1,2,1,2,3,2,1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,3,3,3,3,3,2,1,0]
#d2 = [1,1,2,1,0,0,0,0,0,0,0,0,1,1,1,1,2,2,1,1,2,2,3,3,2,1,1,1,1,2,2,1,1,0,1,1,1,0,1,2,3,2,1,0]

#d1 = [math.sin(x)+np.random.normal(0,0.25) for x in range(15)]
#d2 = [math.sin(x)+np.random.normal(0,0.25) for x in range(5,25)]

d1 = []
r1 = []
dpth1 = []
d2 = []
r2 = []
dpth2 = []
d3 = []
r3 = []
dpth3 = []
d4 = []
r4 = []
dpth4 = []


iFile = csv.reader(open('./data/2.csv','r'))

for l in iFile:
	dpth1.append(float(l[0]))
	d1.append(float(l[1]))
	r1.append(float(l[2]))

iFile = csv.reader(open('./data/3.csv','r'))

for l in iFile:
	dpth2.append(float(l[0]))
	d2.append(float(l[1]))
	r2.append(float(l[2]))

iFile = csv.reader(open('./data/4.csv','r'))

for l in iFile:
	dpth3.append(float(l[0]))
	d3.append(float(l[1]))
	r3.append(float(l[2]))

iFile = csv.reader(open('./data/5.csv','r'))

for l in iFile:
	dpth4.append(float(l[0]))
	d4.append(float(l[1]))
	r4.append(float(l[2]))

'''
d1 = scipy.signal.decimate(d1,1)[700*10:-100*10]
r1 = scipy.signal.decimate(r1,1)[700*10:-100*10]
dpth1 = scipy.signal.decimate(dpth1,1)[700*10:-100*10]

d2 = scipy.signal.decimate(d2,1)[700*10:-100*10]
r2 = scipy.signal.decimate(r2,1)[700*10:-100*10]
dpth2 = scipy.signal.decimate(dpth2,1)[700*10:-100*10]

d3 = scipy.signal.decimate(d3,1)[700*10:-100*10]
r3 = scipy.signal.decimate(r3,1)[700*10:-100*10]
dpth3 = scipy.signal.decimate(dpth3,1)[700*10:-100*10]

d4 = scipy.signal.decimate(d4,1)[700*10:-100*10]
r4 = scipy.signal.decimate(r4,1)[700*10:-100*10]
dpth4 = scipy.signal.decimate(dpth4,1)[700*10:-100*10]
'''

d1 = d1[700*10:-100*10]
r1 = r1[700*10:-100*10]
dpth1 = dpth1[700*10:-100*10]

d2 = d2[700*10:-100*10]
r2 = r2[700*10:-100*10]
dpth2 = dpth2[700*10:-100*10]

d3 = d3[700*10:-100*10]
r3 = r3[700*10:-100*10]
dpth3 = dpth3[700*10:-100*10]

d4 = d4[700*10:-100*10]
r4 = r4[700*10:-100*10]
dpth4 = dpth4[700*10:-100*10]

maxD1 = dpth1[np.argmax(d1)]
maxD2 = dpth2[np.argmax(d2)]
maxD3 = dpth3[np.argmax(d3)]
maxD4 = dpth4[np.argmax(d4)]

dpth1 = [x - maxD1 for x in dpth1]
dpth2 = [x - maxD2 for x in dpth2]
dpth3 = [x - maxD3 for x in dpth3]
dpth4 = [x - maxD4 for x in dpth4]

d1_z = scipy.stats.mstats.zscore(d1)
d2_z = scipy.stats.mstats.zscore(d2)
d3_z = scipy.stats.mstats.zscore(d3)
d4_z = scipy.stats.mstats.zscore(d4)

r1_z = scipy.stats.mstats.zscore(r1)
r2_z = scipy.stats.mstats.zscore(r2)
r3_z = scipy.stats.mstats.zscore(r3)
r4_z = scipy.stats.mstats.zscore(r4)

##########
# Now go #
##########

val, DTW = dtw(d1_z, d2_z, distance)
points = backtrack(DTW)


#plt.plot(d1)
#plt.plot([x + 10 for x in d2])					#I added 10 because
#plt.ylim([-10,20])

#val, DTW = dtw(r1_z, r2_z, distance)
#pointsR = backtrack(DTW)

lines = []
for i in range(0,len(points),2):	#2 for half the number of lines
	#for j in range(0,len(pointsR), 1):
	#	if abs(points[i][0] - pointsR[j][0]) < 2 and abs(points[i][1] - pointsR[j][1]) < 3:
	#if points[i][0] == 1 or abs(d1[points[i][0] - 1] - d1[points[i][0] - 2]) > 5:			#ONLY DRAWW THE DIFFERENCE IF IT's GREATER THAN THIS VALUE
	#had to -1 because of DTW array starting at 0, but  important starting at 1	
		lines.append([(dpth1[points[i][0]-1], d1[points[i][0]-1]),(dpth2[points[i][1]-1], d2[points[i][1]-1] + 200)]) 	#I added 10 because

lc = clt.LineCollection(lines, colors='r', linestyles='dotted')
fig, ax = plt.subplots()
plt.plot(dpth1, d1)
plt.plot(dpth2, [x + 200 for x in d2])					#I added 10 because
ax.add_collection(lc)
#plt.ylim([0,500])
#plt.xlim([-1,max(len(d1), len(d2))])
#plt.xlim([-150, 200])
plt.autoscale()
plt.show()




'''
val, DTW = dtw(d2_z, d3_z, distance)
points = backtrack(DTW)

#plt.plot(d1)
#plt.plot([x + 10 for x in d2])					#I added 10 because
#plt.ylim([-10,20])

lines = []
for i in range(0,len(points),1):	#2 for half the number of lines
	#had to -1 because of DTW array starting at 0, but  important starting at 1	
	lines.append([(dpth2[points[i][0]-1],d2[points[i][0]-1] + 100),(dpth3[points[i][1]-1],d3[points[i][1]-1] + 200)]) 	#I added 10 because

lc = clt.LineCollection(lines, colors='r', linestyles='dotted')
#fig, ax = plt.subplots()
#plt.plot(dpth1, d1)
plt.plot(dpth3, [x + 200 for x in d3])					#I added 10 because
ax.add_collection(lc)
#plt.ylim([0,500])
#plt.xlim([-1,max(len(d1), len(d2))])
#plt.xlim([-150, 200])
#plt.autoscale()
#plt.show()

val, DTW = dtw(d3_z, d4_z, distance)
points = backtrack(DTW)

#plt.plot(d1)
#plt.plot([x + 10 for x in d2])					#I added 10 because
#plt.ylim([-10,20])

lines = []
for i in range(0,len(points),1):	#2 for half the number of lines
	#had to -1 because of DTW array starting at 0, but  important starting at 1	
	lines.append([(dpth3[points[i][0]-1],d3[points[i][0]-1] + 200),(dpth4[points[i][1]-1],d4[points[i][1]-1] + 300)]) 	#I added 10 because

lc = clt.LineCollection(lines, colors='r', linestyles='dotted')
#fig, ax = plt.subplots()
#plt.plot(dpth1, d1)
plt.plot(dpth4, [x + 300 for x in d4])					#I added 10 because
ax.add_collection(lc)
#plt.ylim([0,500])
#plt.xlim([-1,max(len(d1), len(d2))])
#plt.xlim([-150, 200])
plt.autoscale()
plt.show()

np.savetxt('DTWmat.csv', DTW, delimiter=',')









'''


